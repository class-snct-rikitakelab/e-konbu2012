6/24 2012ETロボコン東北地区独自教育会　メモ　本間

モデリング演習編
３チームに分かれてベーシックコースを走り切るためのモデリング（クラス図のみ）を行った。
実際にモデリング演習でやったこと
ユースケース図とユースケース記述とsysMLで書かれた要求図を渡されて
そこからクラス図を書いて見ようという企画。
ベーシックコースを走り切るための構造を考えよう！がテーマ

私のチームは４名
＿＿＿＿＿＿＿チーム構成＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
仙台高専　よいこんぶ　本間　じゃんけんでモデリング演習のプロジェクトリーダーになるはめに

八戸高専　チーム名不明　クジさん	
高専教員　部活としてロボコンに参加
１，２年生がメインで苦慮している。モデリングはさっぱ手をつけてなく、
プログラムから毎年入ってしまっており、それを打破するあめに今回参加。

リコー秋田事業所　　東北魂　平塚さん
社会人３年目　普段の業務のはプリンタの組み込みソフトウェア開発　ハードは開発しない。激務。
ETロボコンの活動は業務時間外を当ており苦しいらしい。
学生の時は原子のエネルギーの均衡だかなんだかを研究してた。
チームは同期４名
上司の命令でロボコンに参加
同じ会社の北海道にある事業所は競技部門で一位をとっている。今年もでるかは不明らしい。

アリザワさん　岩手県立大学　２年生　
ロボコン初参加　モデルもプログラムも書いていないらしい。
＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿


成果物としてあがったクラス図は別ファイル参照

グループワークの方針
グループのだれもまともにモデルが書ける人がいなかった。
クラスになりそうなものを付箋紙にそれぞれが書きだして
それをホワイトボードに貼った。
その付箋紙をグループ分けして。
そこからメンバーそれぞれがクラス図を作成した。


・演習を通して気づいた点
それぞれがクラス図を描くと、結局その中のだれかのクラス図がベースになって
採用されなかった人の意見があまり反映されない。
ベースになったクラス図を書いた人の能力に依存してしまうかも。

ある程度モデリング能力があるチームだったらむしろいっしょにクラス図を書いていった方がいいかもしれない。



・アドバイスを受けた点
要求から構造のモデリングに至るステップが今回の味噌
自分たちが作ったモデルに関して
	走行方法クラスのライントレースするは不適切　前進とか後退とか停止とかに別れるんじゃない？
	自己位置推定のためにはモータの観点量がいるが、モータと関連が無くていいのか？という質問を講師にしたところ、
	必ずしもそうする必要はなく隣接するクラスがどれぐらいロボットが進んだのかを知っていればいいのでは？これがbetter
	関連の循環はさけるべき	
	クラス同士の配置を適切にすると見やすまた理解しやすい。矛盾点に気づきやすいモデルになる。今回はぐちゃぐちゃ

ロボコンにおける評価について
	ユースケース図を描くなら、ユースケース記述も入れろ　しかし、独自性が出しにくい部分なので、あまり差はでない
	むしろクラス図に独自性などを出すべき。しかし減点もされやすい。矛盾点や記法にミスがあるとあっという間に持ち点なくなる。	
	採点の方法として、最初におかしな点とかないか見て、減点してから、いい点を探して加点する。しかしおかしな点が多いと、
	加点する際にあまり加点がされないケースが多くなる。

モデリングの際に参考にしたい点	
責務が集中して中央集権的なクラスがあるのは減点の対象
責務はばらばらに分け、結合度を低くするのがみそ
ex.)走行方法クラスを区間を判断するクラスとただ走らせるだけのクラスに分ける。とか
他のチームのモデルをよく検証する必要がありそう。


・うまくいった点
スタート関連のクラス図はよさそうと言われた。
他のチームの人とお話することができた。

・うまくいかなかった点
ちゃんとモデリング出来る人チームにいねぇー

機能と構造を分けて考えられない（オブジェクト指向をわかっていない）人がいてその人にオブジェクト指向的考えかたを
伝えるのに大きく時間を割いてしまった。（八戸高専教員に対して）
他の二人の意見を取り出せなかった。

オブジェクト指向はものに着目する
関数型言語的考え方だと機能に着目する

とりあえずやる！ができなかった。大して成果が得られない議論に時間を費やしてしまった。
グループの方針を決めるとか。短期決戦の今回の演習ではたとえずれた方針でもとっとと方針を決めてしまえばよかった。



・その他
東北地区の独自教育を録画した動画を近日公開予定
去年のも含まれる

まいまい式の正規化について質問したが、わからないと言われた。
超音波センサの値がとびとびになる件も分からないが、フィルタとかかければいいんじゃないかという提案があった。

sysMLいいかもね。


自己位置推定編

基本的に資料参照してください。補足説明などを主にここに記述する。
自己位置推定ができる前提条件として
タイヤの半径がわかってる
タイヤがすべらない

がある。実際のところ半径はわかっても、タイヤはすべってしまい。誤差が発生する。
しかしながら、短い期間では誤差が少ない。だんだん誤差が大きなってしまう。補正が必要だと思われる。

自己位置推定ができると・・・	
	マーカーに頼る必要がなくなる。
	区間ごとに走行パターンを組めるようになる
	ラインを無視した走行ができるようになる。


座標を３次元で洗わわしている位置を表すx,yこれに加えてロボットの姿勢（向きを表す）θr


微分積分の近似では誤差がでる。積分の場合は長方形でなく台形で近似する方法もあるかと
値は増減するとのであまり誤差は気にならないかもね。

エンコーダで帰ってくる値はdegなのでradに変換しやる必要があるよ。欲しいのは単位時間あたりに変化した角度の量だから。つまり角速度

車輪の半径は41mm
W162mm

x,y,θの初期値をどうするかでプロットしたいグラフの座標軸を決めれる。お好み

パスワードがかかった配布資料のpasswordはettohoku

差分を取る際の一番最初の処理で一個前の値はどうやって処理するかは気を付けないといけない。
ゼロクリア　それとも？？
PID制御でも似たようなことやってるよね。

自己位置推定の誤差の補正の指針
マーカー検出地
直線検出時
直線の向き　水平線　y座標を補正できる
	　　垂直線　x座標を補正できる

誤差には２種類ある
距離のずれと
姿勢のずれ

姿勢のずれは致命的　
これがずれるととんでもない方向に進んでると勘違いしてしまう。

